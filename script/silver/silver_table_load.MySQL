/*
===============================================================================
Load Silver Layer (Bronze -> Silver)
===============================================================================
Script Purpose:
    This method performs the ETL (Extract, Transform, Load) process to 
    populate the 'silver'  tables from the 'bronze' tables.
	Actions Performed:
		- Truncates Silver tables.
		- Inserts transformed and cleansed data from Bronze into Silver tables.
		
Parameters:
    None. 
	  This method does not accept any parameters or return any values.
===============================================================================
*/
-- Capture the start time for performance measurement
SET @start_time = NOW();

-- Truncate and Load `silver.crm_cust_info`
-- Remove existing data to avoid duplication
TRUNCATE TABLE `silver.crm_cust_info`;

-- Insert cleaned customer data
INSERT INTO `silver.crm_cust_info`(
    cst_id,
    cst_key,
    cst_firstname,
    cst_lastname,
    cst_marital_status,
    cst_gndr,
    cst_create_date
)
SELECT DISTINCT 
    TRIM(cst_id) AS cst_id,
    TRIM(cst_key) AS cst_key,
    TRIM(cst_firstname) AS cst_firstname,
    TRIM(cst_lastname) AS cst_lastname,
    CASE 
        WHEN UPPER(TRIM(cst_marital_status)) = 'M' THEN 'married'
        WHEN UPPER(TRIM(cst_marital_status)) = 'S' THEN 'single'
        ELSE 'n/a'
    END AS cst_marital_status, -- Normalize marital status
    CASE 
        WHEN UPPER(TRIM(cst_gndr)) = 'F' THEN 'female'
        WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'male'
        ELSE 'n/a'
    END AS cst_gndr, -- Normalize gender
    TRIM(cst_create_date) AS cst_create_date 
FROM (
    SELECT *, 
        ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) AS row_num
    FROM `bronze.crm_cust_info` 
    WHERE cst_id IS NOT NULL
) AS notduplicate 
WHERE row_num = 1; -- Select the most recent record per customer

-- Capture end time and compute execution duration
SET @end_time = NOW();
SELECT TIME_TO_SEC(TIMEDIFF(@end_time, @start_time)) AS TotalSecondtoload;

--------------------------------------------------------------------------------------------

-- Capture start time for product info processing
SET @start_time = NOW();

-- Truncate and Load `silver.crm_prd_info`
TRUNCATE TABLE `silver.crm_prd_info`;

-- Insert cleaned product data
INSERT INTO `silver.crm_prd_info`(
    prd_id,
    cat_id,
    prd_key,
    prd_nm,
    prd_cost,
    prd_line,
    prd_start_dt,
    prd_end_dt
)
SELECT 
    prd_id,
    REPLACE(SUBSTRING(prd_key, 1, 5), '-', '_') AS cat_id, -- Extract and standardize category ID
    SUBSTRING(prd_key, 7, LENGTH(prd_key)) AS prd_key, -- Extract product key
    prd_nm,
    prd_cost,
    CASE 
        WHEN UPPER(TRIM(prd_line)) = 'M' THEN 'Mountain'
        WHEN UPPER(TRIM(prd_line)) = 'R' THEN 'Road'
        WHEN UPPER(TRIM(prd_line)) = 'S' THEN 'Other Sales'
        WHEN UPPER(TRIM(prd_line)) = 'T' THEN 'Touring'
        ELSE 'n/a'
    END AS prd_line, -- Map product line codes
    prd_start_dt,
    DATE_FORMAT(DATE_SUB(LEAD(prd_start_dt) 
    OVER (PARTITION BY prd_key ORDER BY prd_start_dt), INTERVAL 1 DAY), '%Y-%m-%d') AS prd_end_dt -- Compute product end date
FROM `bronze.crm_prd_info`;

-- Capture execution duration
SET @end_time = NOW();
SELECT TIME_TO_SEC(TIMEDIFF(@end_time, @start_time)) AS TotalSecondtoload;

--------------------------------------------------------------------------------------------

-- Capture start time for sales details processing
SET @start_time = NOW();

-- Truncate and Load `silver.crm_sales_details`
TRUNCATE TABLE `silver.crm_sales_details`;

-- Insert cleaned sales data
INSERT INTO `silver.crm_sales_details`(
    sls_ord_num,
    sls_prd_key,
    sls_cust_id,
    sls_order_dt,
    sls_ship_dt,
    sls_due_dt,
    sls_sales,
    sls_quantity,
    sls_price
)
SELECT 
    sls_ord_num,
    sls_prd_key,
    sls_cust_id,
    CASE 
        WHEN sls_order_dt <= 0 OR LENGTH(sls_order_dt) != 8 THEN NULL 
        ELSE CAST(sls_order_dt AS DATE) 
    END AS sls_order_dt,
    CASE 
        WHEN sls_ship_dt <= 0 OR LENGTH(sls_ship_dt) != 8 THEN NULL 
        ELSE CAST(sls_ship_dt AS DATE) 
    END AS sls_ship_dt,
    CASE 
        WHEN sls_due_dt <= 0 OR LENGTH(sls_due_dt) != 8 THEN NULL 
        ELSE CAST(sls_due_dt AS DATE) 
    END AS sls_due_dt,
    CASE 
        WHEN sls_sales IS NULL OR sls_sales <= 0 OR sls_sales != sls_quantity * ABS(sls_price) 
        THEN sls_quantity * ABS(sls_price) 
        ELSE sls_sales 
    END AS sls_sales,
    sls_quantity,
    CASE 
        WHEN sls_price IS NULL OR sls_price <= 0 THEN sls_sales / NULLIF(sls_quantity, 0) 
        ELSE sls_price 
    END AS sls_price
FROM `bronze.crm_sales_details`;

-- Capture execution duration
SET @end_time = NOW();
SELECT TIME_TO_SEC(TIMEDIFF(@end_time, @start_time)) AS TotalSecondtoload;

--------------------------------------------------------------------------------------------

-- Capture start time for ERP customer data processing
SET @start_time = NOW();

-- Truncate and Load `silver.erp_cust_az12`
TRUNCATE TABLE `silver.erp_cust_az12`;

-- Insert cleaned ERP customer data
INSERT INTO `silver.erp_cust_az12`(
    cid,
    bdate,
    gen
)
SELECT 
    REPLACE(cid, "NAS", "") AS cid, -- Remove "NAS" prefix from customer IDs
    CASE 
        WHEN bdate > CURDATE() THEN CURDATE() 
        ELSE bdate 
    END AS bdate, -- Ensure birthdate is valid
    gen
FROM `bronze.erp_cust_az12`;

-- Capture execution duration
SET @end_time = NOW();
SELECT TIME_TO_SEC(TIMEDIFF(@end_time, @start_time)) AS TotalSecondtoload;

--------------------------------------------------------------------------------------------

-- Capture start time for ERP location data processing
SET @start_time = NOW();

-- Truncate and Load `silver.erp_loc_a101`
TRUNCATE TABLE `silver.erp_loc_a101`;

-- Insert cleaned location data
INSERT INTO `silver.erp_loc_a101`(
    cid,
    cntry
)
SELECT 
    REPLACE(cid, "-", "") AS cid, -- Remove dashes from customer IDs
    CASE
        WHEN TRIM(cntry) = 'DE' THEN 'Germany'
        WHEN TRIM(cntry) IN ('USA', 'US') THEN 'United States'
        WHEN TRIM(cntry) = '' OR TRIM(cntry) IS NULL THEN 'N/A'
        ELSE TRIM(cntry)
    END AS cntry -- Standardize country names
FROM `bronze.erp_loc_a101`;

-- Capture execution duration
SET @end_time = NOW();
SELECT TIME_TO_SEC(TIMEDIFF(@end_time, @start_time)) AS TotalSecondtoload;

--------------------------------------------------------------------------------------------

-- Capture start time for ERP product category data processing
SET @start_time = NOW();

-- Truncate and Load `silver.erp_px_cat_g1v2`
TRUNCATE TABLE `silver.erp_px_cat_g1v2`;

-- Insert cleaned product category data
INSERT INTO `silver.erp_px_cat_g1v2`(
    id,
    cat,
    subcat,
    maintenance
)
SELECT id, cat, subcat, maintenance FROM `bronze.erp_px_cat_g1v2`;

-- Capture execution duration
SET @end_time = NOW();
SELECT TIME_TO_SEC(TIMEDIFF(@end_time, @start_time)) AS TotalSecondtoload;
